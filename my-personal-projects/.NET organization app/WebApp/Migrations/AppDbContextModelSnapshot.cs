// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebApp.Models.TaskCategory", b =>
                {
                    b.Property<int>("TaskCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskCategoryID"), 1L, 1);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TaskCategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("TaskCategories");
                });

            modelBuilder.Entity("WebApp.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApp.Models.UserTask", b =>
                {
                    b.Property<int>("UserTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTaskID"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserTaskID");

                    b.HasIndex("UserID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("WebApp.Models.CalendarTask", b =>
                {
                    b.HasBaseType("WebApp.Models.UserTask");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("HoursBeforeEmail")
                        .HasColumnType("int");

                    b.Property<int?>("HoursBeforeNotification")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("RemindMeEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("RemindMeNotification")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.ToTable("CalendarTasks", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.NoDeadlineTask", b =>
                {
                    b.HasBaseType("WebApp.Models.UserTask");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("NoDeadlineTasks", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.RepetitiveTask", b =>
                {
                    b.HasBaseType("WebApp.Models.UserTask");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Daily")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("OnFriday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnMonday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnSaturday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnSunday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnThursday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnTuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnWednesday")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Weekly")
                        .HasColumnType("bit");

                    b.ToTable("RepetitiveTasks", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TaskCategory", b =>
                {
                    b.HasOne("WebApp.Models.User", "User")
                        .WithMany("TaskCategories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Models.UserTask", b =>
                {
                    b.HasOne("WebApp.Models.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Models.CalendarTask", b =>
                {
                    b.HasOne("WebApp.Models.UserTask", null)
                        .WithOne()
                        .HasForeignKey("WebApp.Models.CalendarTask", "UserTaskID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.NoDeadlineTask", b =>
                {
                    b.HasOne("WebApp.Models.UserTask", null)
                        .WithOne()
                        .HasForeignKey("WebApp.Models.NoDeadlineTask", "UserTaskID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.RepetitiveTask", b =>
                {
                    b.HasOne("WebApp.Models.UserTask", null)
                        .WithOne()
                        .HasForeignKey("WebApp.Models.RepetitiveTask", "UserTaskID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.User", b =>
                {
                    b.Navigation("TaskCategories");

                    b.Navigation("UserTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
