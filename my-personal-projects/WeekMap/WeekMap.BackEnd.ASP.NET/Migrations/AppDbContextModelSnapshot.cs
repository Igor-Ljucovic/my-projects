// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeekMap.Data;

#nullable disable

namespace WeekMap.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeekMap.Models.Activity", b =>
                {
                    b.Property<long>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActivityID"), 1L, 1);

                    b.Property<long?>("ActivityCategoryID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ActivityID");

                    b.HasIndex("ActivityCategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("WeekMap.Models.ActivityCategory", b =>
                {
                    b.Property<long>("ActivityCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActivityCategoryID"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ActivityCategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("ActivityCategories", (string)null);
                });

            modelBuilder.Entity("WeekMap.Models.PlannedWeekMap", b =>
                {
                    b.Property<long>("PlannedWeekMapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PlannedWeekMapID"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("DayEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("DayStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("ShowDescriptionInPreview")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPlaceInPreview")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowSaturday")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowSunday")
                        .HasColumnType("bit");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<string>("WeekStartDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlannedWeekMapID");

                    b.HasIndex("UserID");

                    b.ToTable("PlannedWeekMaps", (string)null);
                });

            modelBuilder.Entity("WeekMap.Models.PlannedWeekMapActivity", b =>
                {
                    b.Property<long>("PlannedWeekMapID")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityID")
                        .HasColumnType("bigint");

                    b.Property<long>("PlannedWeekMapActivityID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("OnFriday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnMonday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnSaturday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnSunday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnThursday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnTuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("OnWednesday")
                        .HasColumnType("bit");

                    b.Property<bool>("RepeatEveryWeek")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("PlannedWeekMapID", "ActivityID", "PlannedWeekMapActivityID");

                    b.HasIndex("ActivityID");

                    b.ToTable("PlannedWeekMapActivities", (string)null);
                });

            modelBuilder.Entity("WeekMap.Models.RealisedWeekMap", b =>
                {
                    b.Property<long>("RealisedWeekMapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RealisedWeekMapID"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlannedWeekMapID")
                        .HasColumnType("bigint");

                    b.HasKey("RealisedWeekMapID");

                    b.HasIndex("PlannedWeekMapID");

                    b.ToTable("RealisedWeekMaps", (string)null);
                });

            modelBuilder.Entity("WeekMap.Models.RealisedWeekMapActivity", b =>
                {
                    b.Property<long>("RealisedWeekMapID")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityID")
                        .HasColumnType("bigint");

                    b.Property<long>("RealisedWeekMapActivityID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("RealisedEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("RealisedStartTime")
                        .HasColumnType("time");

                    b.HasKey("RealisedWeekMapID", "ActivityID", "RealisedWeekMapActivityID");

                    b.HasIndex("ActivityID");

                    b.ToTable("RealisedWeekMapActivities", (string)null);
                });

            modelBuilder.Entity("WeekMap.Models.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailConfirmationTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("WeekMap.Models.UserDefaultWeekMapSettings", b =>
                {
                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("DayEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("DayStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("ShowDescriptionInPreview")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPlaceInPreview")
                        .HasColumnType("bit");

                    b.Property<bool>("SkipSaturday")
                        .HasColumnType("bit");

                    b.Property<bool>("SkipSunday")
                        .HasColumnType("bit");

                    b.Property<string>("WeekStartDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("UserDefaultWeekMapSettings", (string)null);
                });

            modelBuilder.Entity("WeekMap.Models.UserSettings", b =>
                {
                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<bool>("EmailUpdates")
                        .HasColumnType("bit");

                    b.Property<bool>("Notification")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("NotificationTime")
                        .HasColumnType("time");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("WeekMap.Models.Activity", b =>
                {
                    b.HasOne("WeekMap.Models.ActivityCategory", "ActivityCategory")
                        .WithMany()
                        .HasForeignKey("ActivityCategoryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WeekMap.Models.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeekMap.Models.ActivityCategory", b =>
                {
                    b.HasOne("WeekMap.Models.User", "User")
                        .WithMany("ActivityCategories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeekMap.Models.PlannedWeekMap", b =>
                {
                    b.HasOne("WeekMap.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeekMap.Models.PlannedWeekMapActivity", b =>
                {
                    b.HasOne("WeekMap.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeekMap.Models.PlannedWeekMap", "PlannedWeekMap")
                        .WithMany()
                        .HasForeignKey("PlannedWeekMapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("PlannedWeekMap");
                });

            modelBuilder.Entity("WeekMap.Models.RealisedWeekMap", b =>
                {
                    b.HasOne("WeekMap.Models.PlannedWeekMap", "PlannedWeekMap")
                        .WithMany("RealisedWeekMaps")
                        .HasForeignKey("PlannedWeekMapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlannedWeekMap");
                });

            modelBuilder.Entity("WeekMap.Models.RealisedWeekMapActivity", b =>
                {
                    b.HasOne("WeekMap.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeekMap.Models.RealisedWeekMap", "RealisedWeekMap")
                        .WithMany()
                        .HasForeignKey("RealisedWeekMapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("RealisedWeekMap");
                });

            modelBuilder.Entity("WeekMap.Models.UserDefaultWeekMapSettings", b =>
                {
                    b.HasOne("WeekMap.Models.User", "User")
                        .WithOne("UserDefaultWeekMapSettings")
                        .HasForeignKey("WeekMap.Models.UserDefaultWeekMapSettings", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeekMap.Models.UserSettings", b =>
                {
                    b.HasOne("WeekMap.Models.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("WeekMap.Models.UserSettings", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeekMap.Models.PlannedWeekMap", b =>
                {
                    b.Navigation("RealisedWeekMaps");
                });

            modelBuilder.Entity("WeekMap.Models.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ActivityCategories");

                    b.Navigation("UserDefaultWeekMapSettings")
                        .IsRequired();

                    b.Navigation("UserSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
